q()
plt <- ggplot(mpg,aes(y=hwy)) #import dataset into ggplot2
install.packages("shiny")
install.packages("learnr")
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
?ggplot()
head(mpg)
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
library(tidyverse)
?mutate()
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to original data frame
demo <- read.csv("C:/Users/ramak/OneDrive/Desktop/R_Analysis/01_Demo/demo.csv")
View(demo)
demo <- read.csv("C:/Users/ramak/OneDrive/Desktop/R_Analysis/01_Demo/demo.csv")
`demo.(1)` <- read.csv("C:/Users/ramak/OneDrive/Desktop/R_Analysis/01_Demo/demo (1).json", header=FALSE)
View(`demo.(1)`)
demo <- read.csv("C:/Users/ramak/OneDrive/Desktop/R_Analysis/01_Demo/demo.json", header=FALSE)
View(demo)
demo2 <- read.csv("C:/Users/ramak/OneDrive/Desktop/R_Analysis/01_Demo/demo2.csv")
View(demo2)
demo <- read.csv("C:/Users/ramak/OneDrive/Desktop/R_Analysis/01_Demo/demo.json", header=FALSE)
View(demo)
demo <- read.csv("C:/Users/ramak/OneDrive/Desktop/R_Analysis/01_Demo/demo.csv")
View(demo)
demo2 <- read.csv("C:/Users/ramak/OneDrive/Desktop/R_Analysis/01_Demo/demo2.csv")
View(demo2)
Vehicle_Data <- read.csv("C:/Users/ramak/OneDrive/Desktop/R_Analysis/01_Demo/Vehicle_Data.xlsx", sep="")
View(Vehicle_Data)
demo_table2 <- fromJSON(txt='demo.json')
?fromJSON()
library(ggplot2)
?fromJSON()
?fromJSON()
View(demo)
View(`demo.(1)`)
View(demo2)
demo_table2 <- fromJSON(txt='demo.json')
demo <- read.csv("C:/Users/ramak/OneDrive/Desktop/R_Analysis/01_Demo/demo.csv")
View(demo)
demo <- read.csv("C:/Users/ramak/OneDrive/Desktop/R_Analysis/01_Demo/demo.csv")
View(demo)
demo_table2 <- fromJSON(txt='demo.json')
View(demo2)
demo_table2 <- fromJSON(txt='demo.json')
demo_table2 <- fromJSON(txt='demo.json')
demo.json <- read.csv("C:/Users/ramak/OneDrive/Desktop/R_Analysis/01_Demo/demo.json", header=FALSE)
View(demo.json)
demo_table2 <- fromJSON(txt='demo.json')
demo.csv <- read.csv("C:/Users/ramak/OneDrive/Desktop/R_Analysis/01_Demo/demo.csv")
View(demo.csv)
demo.2csv <- read.csv("C:/Users/ramak/OneDrive/Desktop/R_Analysis/01_Demo/demo2.csv")
View(demo.2csv)
Vehicle_Data <- read.csv("C:/Users/ramak/OneDrive/Desktop/R_Analysis/01_Demo/Vehicle_Data.xlsx", sep="")
View(Vehicle_Data)
demo_table2
View(demo.json)
View(demo.csv)
View(demo.2csv)
View(`demo.(1)`)
View(demo)
View(demo2)
View(`demo.(1)`)
View(demo.2csv)
View(demo.csv)
View(demo.json)
View(demo2)
Vehicle_Data.xlxs <- read.csv("C:/Users/ramak/OneDrive/Desktop/R_Analysis/01_Demo/Vehicle_Data.xlsx", sep="")
View(Vehicle_Data.xlxs)
demo_table2 <- fromJSON(txt='demo.json')
library(jsonlite)
demo_table2 <- fromJSON(txt='demo.json')
demo_table2 <- fromJSON(txt='demo.json')
install.packages()
?fromJSON()
demo_table2 <- fromJSON(txt='demo.json')
View(demo.json)
?read.csv()
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
View(demo.csv)
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
View(demo)
View(`demo.(1)`)
View(demo.2csv)
View(demo.csv)
View(demo.json)
View(`demo.(1)`)
View(demo.json)
View(demo)
demo_table[3,"Year"]
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
?read.csv()
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
view(demo.csv)
View(demo.csv)
?read.csv()
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
View(demo.json)
`demo.(1)` <- read.csv("C:/Users/ramak/OneDrive/Desktop/R_Analysis/01_Demo/demo (1).json", header=FALSE)
View(`demo.(1)`)
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
load("~/15-1 Activities/01_Ins_RBasics/Solved/.RData")
view(students)
students
students
library(readr)
students <- read_csv("15-1 Activities/06_Evr_Tibble/Resources/students.csv")
View(students)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
students <-read_csv("students.csv")
students <-read_csv("Resources/students.csv")
students <-read_csv("Resources/students.csv")
students <-read_csv("Resources/students.csv")
head(students)
# unique(dataset, variable) displays unique elements from that column
unique(students,school_name)
# unique(dataset, variable) displays unique elements from that column
unique(students, school_name)
# unique(dataset, variable) displays unique elements from that column
unique(students, 5)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
---
title: "tibbles"
output: html_document: default
---
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data(diamonds, package='ggplot2')
nrow(diamonds)
# unique(dataset, variable) displays unique elements from that column
unique(students, 5,incomparables = FALSE)
# Use length() to identify the number of schools
count(students,1)
# Use length() to identify the number of schools
length(students,5)
# Use length() to identify the number of schools
length(5)
# nrow() returns the number of rows
nrow()
# unique(dataset, variable) displays unique elements from that column
unique(students$incomparables = FALSE)
# unique(dataset, variable) displays unique elements from that column
unique(students$5incomparables = FALSE)
# Use length() to identify the number of schools
length(school_count)
library(tidyverse)
?mutate()
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to original data frame
View(demo_table)
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep') #create summary table
demo_table[3,"year"]
demo_table[3,"3"]
View(demo_table)
demo_table$"Vehicle_Class"
demo_table$"vehicle_Class"[2]
demo_table$"Vehicle_Class"[2]
filter_table<-demo_table2[demo_table2$price>10000,]
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
demo_table2 <- fromJSON(txt='demo.json')
View(demo_table2)
filter_table <- demo_table2[demo_table2$price > 10000,]
View(filter_table)
?subset()
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status) #filter by price and drivetrain
View(filter_table2)
filter_table3 <- demo_table2[("clean" %in% demo_table2$title_status) & (demo_table2$price > 10000) & (demo_table2$drive == "4wd"),]
?sample()
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
library(ggplot2)
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
View(population_table)
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
?sample_n()
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
library(readxl)
Vehicle_Data <- read_excel("Vehicle_Data.xlsx")
View(Vehicle_Data)
?sample_n()
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
library(dbplyr)
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
?sample_n()
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
library(dplyr)
library(dtplyr)
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
> plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
?t.test()
>t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))) #compare sample versus population means
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))) #compare sample versus population means
mpg_data<-read.csv('mpg_modified.csv')#import dataset
mpg_1999<-mpg_data%>%filter(year==1999)#select only data points where the year is 1999
mpg_20008<-mpg_data%>%filter(year==2008)select only data points where the year is 2008
mpg_20008<-mpg_data%>%filter(year==2008) #select only data points where the year is 2008
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T) #compare the mean difference between two samples
mpg_2008<-mpg_data%>%filter(year==2008) #select only data points where the year is 2008
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T) #compare the mean difference between two samples
?aov()
mtcars_filt<-mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
mtcars_filt$cyl<-factor(mtcars_filt$cyl)#convert numeric column to factor
View(mtcars_filt)
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
summary(aov(hp ~ cyl,data=mtcars_filt))
?cor()
head(mtcars)
plt<-ggplot(mtcar,aes(x=hp, y=qsec))#import dataset into ggplot2
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt+geom_point()#create scatter plot
cor(mtcar$hp,mtcars$qsec)#calculate correlation coefficient
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
used_cars<-read.csv(used_car_data.csv',stringsAsFactors = F)#read in dataset
hear(used_cars)
used_cars<-read.csv(used_car_data.csv',stringsAsFactors = F)#read in dataset
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
plt<-ggplot(used_cars,aes(x =Miles_Driven,y=Selling_Price ))#import dataset into ggplot2
plt+geom_point()#create a scatter plot
cor(used_cars$Miles_Driven,used_cars$Selling_Price) #calculate correlation coefficient
used_matrix<-as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")])
cor(used_matrix)
?lm()
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec~hp,mtcars)) #summarize linear model
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
>summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
>summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec~hp,mtcars)) #summarize linear model
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
?chisq.test()
table(mpg$class,mpg$year) #generate contingency table
setwd("C:/Users/ramak/OneDrive/Desktop")
setwd("C:/Users/ramak/OneDrive/Desktop/R_Analysis")
setwd("C:/Users/ramak/OneDrive/Desktop/R_Analysis")
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
setwd("C:/Users/ramak/OneDrive/Desktop/R_Analysis/01_Demo")
library(jsonlite)
demo_table2 <- fromJSON(txt='demo.json')
View(demo_table2)
filter_table <- demo_table2[demo_table2$price > 10000,]
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status) #filter by price and drivetrain
filter_table3 <- demo_table2[("clean" %in% demo_table2$title_status) & (demo_table2$price > 10000) & (demo_table2$drive == "4wd"),]
num_rows <- 1:nrow(demo_table)
sample_rows <- sample(num_rows, 3)
library(tidyverse)
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to original data frame
View(demo_table)
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to original data frame
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep') #create summary table
View(summarize_demo)
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'keep') #create summary table with multiple columns
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)
long_table <- demo_table3 %>% gather(key="Metric",value="Score",buying_price:popularity)
View(demo_table3)
long_table <- demo_table3 %>% gather(key="Metric",value="Score",buying_price:popularity)
long_table <- demo_table3 %>% gather(key="Metric",value="Score",buying_price:popularity)
View(demo_table3)
View(long_table)
wide_table <- long_table %>% spread(key="Metric",value="Score")
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)") #create heatmap with labels
rename(MechaCarChallenge.RScript)
detach("package:dtplyr", unload = TRUE)
library(dtplyr)
library(dtplyr)
MechaCar_table<-read.csv(file ="MechaCar_mpg.csv")
setwd("C:/Users/ramak/OneDrive/Desktop/R_Analysis/01_Demo")
MechaCar_table<-read.csv(file ='MechaCar_mpg.csv')
MechaCar_table<-read.csv(file ='MechaCar_mpg(1).csv')
setwd("C:/Users/ramak/OneDrive/Desktop/R_Analysis/01_Demo")
MechaCar_table<-read.csv(file ='MechaCar_mpg(1).csv')
MechaCar_table<-read.csv(file ='MechaCar_mpg(1).csv'check.names=F,stringsAsFactors = F)
library(dtplyr)
MechaCar_table<-read.csv(file ='MechaCar_mpg(1).csv')
setwd("C:/Users/ramak/OneDrive/Desktop/R_Analysis/01_Demo")
setwd("C:/Users/ramak/OneDrive/Desktop/R_Analysis/01_Demo")
MechaCar_table<-read.csv(file ='MechaCar_mpg(1).csv')
MechaCar_table<-read.csv(file ='MechaCar_mpg.csv')
MechaCar_table<-read.csv(file ='MechaCar_mpg.csv')
MechaCar_table<-read.csv(file ='MechaCar_mpg.csv')
setwd("C:/Users/ramak/OneDrive/Desktop/R_Analysis")
setwd("C:/Users/ramak/OneDrive/Desktop/R_Analysis/01_Demo")
MechaCar_table<-read.csv(file ='MechaCar_mpg.csv')
MechaCar_mpg. <- read.csv("C:/Users/ramak/OneDrive/Desktop/R_Analysis/01_Demo/MechaCar_mpg .csv")
View(MechaCar_mpg.)
MechaCar_table<-read.csv(file ='MechaCar_mpg.csv')
mecha_data <- read.csv("MechaCar_mpg.csv",stringsAsFactors = F,check.names = F)
library(dtplyr)
mecha_data <- read.csv("MechaCar_mpg.csv",stringsAsFactors = F,check.names = F)
library(tidyverse)
mecha_data <- read.csv("MechaCar_mpg.csv",stringsAsFactors = F,check.names = F)
library(dtplyr)
library(tidyverse)
mecha_data <- read.csv("MechaCar_mpg.csv",stringsAsFactors = F,check.names = F)
setwd("C:/Users/ramak/OneDrive/Desktop/R_Analysis/01_Demo")
mecha_data <- read.csv("MechaCar_mpg.csv",stringsAsFactors = F,check.names = F)
library(dtplyr)
library(tidyverse)
mecha_data <- read.csv("MechaCar_mpg.csv",stringsAsFactors = F,check.names = F)
library(tidyverse)
mecha_data <- read.csv("MechaCar_mpg.csv",stringsAsFactors = F,check.names = F)
